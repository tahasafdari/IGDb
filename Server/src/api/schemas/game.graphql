# Represents a game.
type Game {
  # The unique identifier of the game.
  id: ID!
  # The title of the game.
  title: String!
  # The unique identifier for the game from the game API.
  gameApiId: Int!
}

# Query Type: Defines available queries for retrieving game data.
type Query {
  # Retrieves a list of all games.
  games: [Game]!
  # Retrieves a game by its unique ID.
  gameById(gameId: ID!): Game!
  # Retrieves a game by its title.
  gameByTitle(title: String!): Game!
  # Retrieves a game by its unique identifier from the game API.
  gameByApiId(gameApiId: Int!): Game!
  # Retrieves external games by name.
  externalGamesByName(name: String!): [VerboseGame]!
  # Retrieves a verbose game by its unique identifier from the game API.
  externalGameByApiId(gameApiId: Int!): VerboseGame!
}

# Mutation Type: Defines available mutations for creating games.
type Mutation {
  # Creates a new game and returns it.
  createGame(title: String!, gameApiId: Int!): Game!
}
